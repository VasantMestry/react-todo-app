{"version":3,"sources":["components/TodoItem.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","addTask","todo","props","handleComplete","handleDelete","className","key","id","completed","name","onClick","todoList","this","length","map","Component","TodoList","handleChange","e","setState","target","value","handleClick","state","temp","todoTask","Date","now","push","index","alert","filter","handleClearAll","type","onChange","placeholder","disabled","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uTAuDeA,G,kNAlDdC,QAAU,SAACC,GAAU,IAAD,EACsB,EAAKC,MAAtCC,EADW,EACXA,eAAgBC,EADL,EACKA,aAExB,OACC,yBACCC,UAAS,YACTC,IAAKL,EAAKM,IAEV,wBACCD,IAAKL,EAAKM,GACVF,UAAS,oBAAeJ,EAAKO,UAAY,YAAa,KAEtD,8BAAOP,EAAKQ,MACZ,yBAAKJ,UAAS,SACb,4BACCA,UAAS,cACTK,QAAS,kBAAIP,EAAeF,EAAKM,MAFlC,YAMA,4BACCF,UAAS,YACTK,QAAS,kBAAKN,EAAaH,EAAKM,MAFjC,S,uDAYK,IAAD,OAEAI,EAAaC,KAAKV,MAAlBS,SAER,OAAIA,EAASE,OAAS,EAEpB,wBAAIR,UAAS,QAEXM,EAASG,KAAI,SAACb,GAAD,OAAS,EAAKD,QAAQC,OAK/B,yBAAKI,UAAS,SAAd,4B,GA/CaU,cCgHRC,G,wDA5Gd,WAAYd,GAAO,IAAD,8BACjB,cAAMA,IAaPe,aAAe,SAACC,GACf,EAAKC,SAAS,CACblB,KAAMiB,EAAEE,OAAOC,SAhBC,EAoBlBC,YAAc,SAACJ,GAAM,IAAD,EACQ,EAAKK,MAAxBZ,EADW,EACXA,SAAUV,EADC,EACDA,KACduB,EAAI,YAAOb,GACXc,EAAW,CACdhB,KAAMR,EACNO,WAAW,EACXD,GAAImB,KAAKC,OAEVH,EAAKI,KAAKH,GACV,EAAKN,SAAS,CACbR,SAAS,YAAKa,GACdvB,KAAM,MA/BU,EAmClBE,eAAiB,SAAC0B,GAAU,IACnBlB,EAAa,EAAKY,MAAlBZ,SACJa,EAAI,YAAOb,GACfa,EAAKV,KAAI,SAACb,GACLA,EAAKM,KAAOsB,IACf5B,EAAKO,WAAaP,EAAKO,cAGzB,EAAKW,SAAS,CACbR,SAAS,YAAKa,MA5CE,EAgDlBpB,aAAe,SAACyB,GAAU,IACjBlB,EAAa,EAAKY,MAAlBZ,SACJa,EAAI,YAAOb,GACfmB,MAAM,uBACNN,EAAOA,EAAKO,QAAO,SAAC9B,GAAD,OAASA,EAAKM,KAAOsB,KACxC,EAAKV,SAAS,CACbR,SAAS,YAAKa,MAtDE,EA0DlBQ,eAAiB,WAChB,EAAKb,SAAS,CACbR,SAAU,MA1DX,EAAKY,MAAM,CACVZ,SAAS,CACR,CACCF,KAAM,WACNF,GAAI,QACJC,WAAW,IAGbP,KAAM,IAVU,E,qDAgET,IAAD,EACoBW,KAAKW,MAAxBtB,EADD,EACCA,KAAMU,EADP,EACOA,SAEd,OACC,yBAAKN,UAAU,aACd,yBAAKE,GAAG,QACP,yBAAKF,UAAU,UACd,0CACA,6BACC,2BACC4B,KAAK,OACLZ,MAAOpB,EACPiC,SAAUtB,KAAKK,aACfZ,UAAS,WACT8B,YAAY,aAEb,4BACCzB,QAASE,KAAKU,YACdc,UAAWnC,EACXI,UAAS,UAHV,YAOA,4BACCK,QAASE,KAAKoB,eACdI,UAAWzB,EAASE,OAAO,EAC3BR,UAAS,UAHV,aAOA,+BAGF,kBAAC,EAAD,CACCM,SAAUA,EACVR,eAAgBS,KAAKT,eACrBC,aAAcQ,KAAKR,qB,GAtGFW,c,MCORsB,MARf,WACE,OACE,yBAAKhC,UAAU,OACb,kBAAC,EAAD,QCKciC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.82890705.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './TodoItem.css'\r\n\r\nclass TodoItem extends Component {\r\n\r\n\taddTask = (todo) => {\r\n\t\tconst { handleComplete, handleDelete } = this.props;\r\n\r\n\t\treturn (\r\n\t\t\t<div \r\n\t\t\t\tclassName={`listItems`}\r\n\t\t\t\tkey={todo.id}\r\n\t\t\t>\r\n\t\t\t\t<li \r\n\t\t\t\t\tkey={todo.id}\r\n\t\t\t\t\tclassName={`listItems ${todo.completed ? 'completed': ''}`}\r\n\t\t\t\t>\r\n\t\t\t\t\t<span>{todo.name}</span>\r\n\t\t\t\t\t<div className={`icons`}>\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\tclassName={`completeBtn`}\r\n\t\t\t\t\t\t\tonClick={()=>handleComplete(todo.id)}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tComplete\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\tclassName={`deleteBtn`}\r\n\t\t\t\t\t\t\tonClick={()=> handleDelete(todo.id)}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tX\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</li>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\r\n\trender() {\r\n\r\n\t\tconst { todoList } = this.props;\r\n\r\n\t\tif (todoList.length > 0) {\r\n\t\t\treturn (\r\n\t\t\t\t<ul className={`list`}>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttodoList.map((todo)=> this.addTask(todo))\r\n\t\t\t\t\t}\r\n\t\t\t\t</ul>\r\n\t\t\t)\r\n\t\t} else {\r\n\t\t\treturn <div className={`empty`}>Add List Items.. !!!</div>\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default TodoItem;","import React, { Component } from 'react'\r\nimport TodoItem from './TodoItem.js'\r\nimport './TodoList.css'\r\n\r\n\r\nclass TodoList extends Component{\r\n\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state={\r\n\t\t\ttodoList:[\r\n\t\t\t\t{\r\n\t\t\t\t\tname: \"buy milk\",\r\n\t\t\t\t\tid: 1234567,\r\n\t\t\t\t\tcompleted: false\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\ttodo: ''\r\n\t\t}\r\n\t}\r\n\r\n\thandleChange = (e) =>{\r\n\t\tthis.setState({\r\n\t\t\ttodo: e.target.value\r\n\t\t})\r\n\t}\r\n\r\n\thandleClick = (e) =>{\r\n\t\tconst { todoList, todo } = this.state;\r\n\t\tlet temp = [...todoList];\r\n\t\tlet todoTask = {\r\n\t\t\tname: todo,\r\n\t\t\tcompleted: false,\r\n\t\t\tid: Date.now()\r\n\t\t}\r\n\t\ttemp.push(todoTask);\r\n\t\tthis.setState({\r\n\t\t\ttodoList: [...temp],\r\n\t\t\ttodo: ''\r\n\t\t})\r\n\t}\r\n\r\n\thandleComplete = (index) =>{\r\n\t\tconst { todoList } = this.state;\r\n\t\tlet temp = [...todoList];\r\n\t\ttemp.map((todo)=>{\r\n\t\t\tif (todo.id === index) {\r\n\t\t\t\ttodo.completed = !todo.completed;\r\n\t\t\t}\r\n\t\t})\r\n\t\tthis.setState({\r\n\t\t\ttodoList: [...temp]\r\n\t\t})\r\n\t}\r\n\r\n\thandleDelete = (index) =>{\r\n\t\tconst { todoList } = this.state;\r\n\t\tlet temp = [...todoList];\r\n\t\talert('Sure To Delete task')\r\n\t\ttemp = temp.filter((todo)=> todo.id !== index)\r\n\t\tthis.setState({\r\n\t\t\ttodoList: [...temp]\r\n\t\t})\r\n\t}\r\n\r\n\thandleClearAll = () =>{\r\n\t\tthis.setState({\r\n\t\t\ttodoList: []\r\n\t\t})\r\n\t}\r\n\r\n\trender(){\r\n\t\tconst { todo, todoList } = this.state;\r\n\r\n\t\treturn (\r\n\t\t\t<div className='container'>\r\n\t\t\t\t<div id='todo'>\r\n\t\t\t\t\t<div className='header'>\r\n\t\t\t\t\t\t<h2>To-do list</h2>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<input \r\n\t\t\t\t\t\t\t\ttype=\"text\" \r\n\t\t\t\t\t\t\t\tvalue={todo} \r\n\t\t\t\t\t\t\t\tonChange={this.handleChange} \r\n\t\t\t\t\t\t\t\tclassName={`inputBox`}\r\n\t\t\t\t\t\t\t\tplaceholder=\"Add Task\"\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t<button \r\n\t\t\t\t\t\t\t\tonClick={this.handleClick}\r\n\t\t\t\t\t\t\t\tdisabled={!todo}\r\n\t\t\t\t\t\t\t\tclassName={`addBtn`}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tAdd Todo\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t<button \r\n\t\t\t\t\t\t\t\tonClick={this.handleClearAll}\r\n\t\t\t\t\t\t\t\tdisabled={!todoList.length>0}\r\n\t\t\t\t\t\t\t\tclassName={`addBtn`}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tClear All\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t<br />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<TodoItem \r\n\t\t\t\t\t\ttodoList={todoList}\r\n\t\t\t\t\t\thandleComplete={this.handleComplete}\r\n\t\t\t\t\t\thandleDelete={this.handleDelete}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default TodoList;","import React from 'react';\nimport TodoList from './components/TodoList.js'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}